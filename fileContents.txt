templates/chatbot.html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chatbot</title>

    <!-- Favicon -->
    <link
      rel="icon"
      href="{{ url_for('static', filename='favicon/favicon2.png') }}"
    />

    <!-- Custom CSS -->
    <link
      rel="stylesheet"
      type="text/css"
      href="{{ url_for('static', filename='styles/chatbot.css') }}"
    />
  </head>

  <body class="chatbot-bckg">
    <!-- Chatbot section -->
    <section class="chatbot">
      <!-- <h2>Chatbot</h2> -->

      <img
        class="chatbot-icon"
        src="https://img.freepik.com/premium-vector/chatbot-icon-concept-chat-bot-chatterbot-robot-virtual-assistance-website_123447-1615.jpg"
        alt=""
      />

      <!-- Use hidden to hide the audio container -->
      <audio controls autoplay hidden>
        <source
          src="data:audio/mpeg;base64,{{ speech_base64 }}"
          type="audio/mpeg"
        />
        Your browser does not support the audio element.
      </audio>

      <!-- Magic Text -->
      <div class="magic-container">
        <h1 class="magic-title">
          Sometimes I'll start a line of code and I
          <span class="magic">
            <span class="magic-star">
              <svg viewBox="0 0 512 512">
                <path
                  d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
                />
              </svg>
            </span>
            <span class="magic-star">
              <svg viewBox="0 0 512 512">
                <path
                  d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
                />
              </svg>
            </span>
            <span class="magic-star">
              <svg viewBox="0 0 512 512">
                <path
                  d="M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z"
                />
              </svg>
            </span>
            <span class="magic-text">don't even know</span>
          </span>
          where it's going.
        </h1>
      </div>

      <!-- Form -->
      <form method="POST" action="/chatbot">
        <label for="user_input"
          >Hello, I am the DTL Chatbot. How can I help you today?</label
        >
        <select name="user_input" id="user_input">
          {% for question, choices in questionnaire.items() %}
          <option value="{{ question }}" disabled selected>
            {{ question }}
          </option>
          {% for choice in choices %}
          <option value="{{ choice }}">{{ choice }}</option>
          {% endfor %} {% endfor %}
        </select>
        <button type="submit">Get Assistance</button>
      </form>

      <!-- Display user input and bot response -->
      {% if user_input %}
      <div class="conversation">
        <div class="user-message">
          <p>You: {{ user_input }}</p>
        </div>

        <div class="bot-message">
          <!-- Use hidden to hide the audio container -->
          <audio controls autoplay hidden>
            <source
              src="data:audio/mpeg;base64,{{ response_audio }}"
              type="audio/mpeg"
            />
            Your browser does not support the audio element.
          </audio>
          <p>Bot Message: {{ response_text }}</p>
          {% if redirect_link %}
          <a target="_blank" href="{{ redirect_link }}">{{redirect_text}}</a>
          {% endif %}
        </div>
      </div>
      {% endif %}
    </section>

    <script>
      // Function to open the redirect link after 1 second
      function openRedirectLink() {
        var redirectLink = "{{ redirect_link }}"; // Get the redirect link from Flask template
        if (redirectLink) {
          setTimeout(function () {
            window.open(redirectLink, "_blank"); // Open link in a new tab
          }, 1000); // Wait for 1 second before opening the link
        }
      }

      // Call the function when the page loads
      window.onload = function () {
        openRedirectLink();
      };
    </script>

    <!-- Custom JS -->
    <script
      type="text/javascript"
      src="{{ url_for('static',
    filename='javaScript/chatbot.js') }}"
    ></script>
  </body>
</html>


static/styles/chatbot.css:
@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap");

/* Styling for the chatbot section */

:root {
  --purple: rgb(123, 31, 162);
  --violet: rgb(103, 58, 183);
  --pink: rgb(244, 143, 177);
}

@keyframes background-pan {
  from {
    background-position: 0% center;
  }

  to {
    background-position: -200% center;
  }
}

@keyframes scale {
  from,
  to {
    transform: scale(0);
  }

  50% {
    transform: scale(1);
  }
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(180deg);
  }
}

.magic-container {
  background-color: rgb(10, 10, 10);
  display: grid;
  height: 100vh;
  margin: 0px;
  overflow: hidden;
  place-items: center;
}

.magic-title {
  color: white;
  font-family: "Rubik", sans-serif;
  font-size: clamp(2em, 2vw, 4em);
  font-weight: 400;
  margin: 0px;
  padding: 20px;
  text-align: center;
}

magic-title > .magic {
  display: inline-block;
  position: relative;
}

magic-title > .magic > .magic-star {
  --size: clamp(20px, 1.5vw, 30px);

  animation: scale 700ms ease forwards;
  display: block;
  height: var(--size);
  left: var(--star-left);
  position: absolute;
  top: var(--star-top);
  width: var(--size);
}

magic-title > .magic > .magic-star > svg {
  animation: rotate 1000ms linear infinite;
  display: block;
  opacity: 0.7;
}

magic-title > .magic > .magic-star > svg > path {
  fill: var(--violet);
}

magic-title > .magic > .magic-text {
  animation: background-pan 3s linear infinite;
  background: linear-gradient(
    to right,
    var(--purple),
    var(--violet),
    var(--pink),
    var(--purple)
  );
  background-size: 200%;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  white-space: nowrap;
}

.chatbot {
  margin: 20px;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #f9f9f9;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  text-align: center;
  font-family: "Roboto", sans-serif;
}

.chatbot-bckg {
  background-image: url("https://assets.toptal.io/images?url=https%3A%2F%2Fbs-uploads.toptal.io%2Fblackfish-uploads%2Fcomponents%2Fblog_post_page%2Fcontent%2Fcover_image_file%2Fcover_image%2F1297499%2Fregular_1708x683_cover-chatbot-ux-design-947150b6d0e50becc21ef8c828f22acb.png");
  opacity: 90%;
}

.chatbot-icon {
  width: 200px;
  height: 200px;
  border-radius: 50%;
  background-color: #007bff;
  color: #fff;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  margin-bottom: 20px;
}

/* Styling for the form */
.chatbot form {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 30px;
}

.chatbot label {
  font-size: 20px;
  margin-bottom: 10px;
}

.chatbot select {
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 18px;
}

.chatbot button {
  margin-top: 15px;
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 18px;
}

.chatbot button:hover {
  background-color: #0069d9;
}

/* Styling for the conversation */
.conversation {
  margin-top: 20px;
}

.user-message,
.bot-message {
  padding: 10px;
  border-radius: 5px;
  margin: 5px;
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 16px;
  text-align: left;
}

.user-message {
  background-color: #f0f8ff;
}

.bot-message {
  background-color: #e0ffe0;
}

.bot-message p:first-child {
  margin-bottom: 5px;
}

.user-message a,
.bot-message a {
  color: #007bff;
  text-decoration: none;
  transition: color 0.3s;
  border: 1px solid #007bff;
  padding: 3px 5px;
  border-radius: 3px;
}

.user-message a:hover,
.bot-message a:hover {
  color: #0056b3;
  background-color: #f0f8ff; /* Adding a background color on hover */
}

/* Responsive design */
@media (max-width: 768px) {
  .chatbot section {
    margin: 10px;
    padding: 10px;
  }

  .chatbot {
    margin: 10px;
    padding: 10px;
  }

  .chatbot-bckg {
    background-size: cover;
    opacity: 90%;
  }

  .chatbot label {
    font-size: 16px;
  }

  .chatbot select {
    padding: 10px;
    font-size: 16px;
  }

  .chatbot button {
    margin-top: 10px;
    padding: 8px 16px;
    font-size: 16px;
  }

  .user-message,
  .bot-message {
    font-size: 14px;
  }
}


static/javaScript/chatbot.js:
let index = 0,
  interval = 1000;

const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

const animate = (star) => {
  star.style.setProperty("--star-left", `${rand(-10, 100)}%`);
  star.style.setProperty("--star-top", `${rand(-40, 80)}%`);

  star.style.animation = "none";
  star.offsetHeight;
  star.style.animation = "";
};

for (const star of document.getElementsByClassName("magic-star")) {
  setTimeout(() => {
    animate(star);

    setInterval(() => animate(star), 1000);
  }, index++ * (interval / 3));
}

/* -- ↓↓↓ If you want the sparkle effect to only occur on hover, replace lines 15 and on with this code ↓↓↓ -- */

// let timeouts = [],
//     intervals = [];

// const magic = document.querySelector(".magic");

// magic.onmouseenter = () => {
//   let index = 1;

//   for(const star of document.getElementsByClassName("magic-star")) {
//     timeouts.push(setTimeout(() => {
//       animate(star);

//       intervals.push(setInterval(() => animate(star), 1000));
//     }, index++ * 300));
//   };
// }

// magic.onmouseleave = onMouseLeave = () => {
//   for(const t of timeouts) clearTimeout(t);
//   for(const i of intervals) clearInterval(i);

//   timeouts = [];
//   intervals = [];
// }


